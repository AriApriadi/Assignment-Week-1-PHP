<?php

// Class 1: User
class UserName
{
    public $name;
    public $email;

    public function __construct($name, $email)
    {
        $this->name = $name;
        $this->email = $email;
    }

    public function displayInfo()
    {
        echo "Name: " . $this->name . "<br>";
        echo "Email: " . $this->email . "<br>";
    }
}


// Class 3: FileManager
class FileManager
{
    public static function readFile($filename)
    {
        $content = file_get_contents($filename);
        return $content;
    }

    public static function writeFile($filename, $content)
    {
        file_put_contents($filename, $content);
    }
}

// Class 4: SessionManager
class SessionManager
{
    public static function setSession($key, $value)
    {
        $_SESSION[$key] = $value;
    }

    public static function getSession($key)
    {
        return $_SESSION[$key];
    }
}

// Class 5: StringManipulator
class StringManipulator
{
    public static function reverseString($str)
    {
        return strrev($str);
    }
}

// Usage example:

// Variabel
$name = "John Doe";
$age = 25;

// Konstanta
define("PI", 3.14);

// Operator
$result = $age + 5;

// Struktur Kondisi
if ($result > 30) {
    echo "The result is greater than 30<br>";
} else {
    echo "The result is less than or equal to 30<br>";
}

// Perulangan (Looping)
for ($i = 1; $i <= 5; $i++) {
    echo "Loop iteration: " . $i . "<br>";
}

// Function
function square($num)
{
    return $num * $num;
}

echo "Square of 4: " . square(4) . "<br>";

// Array
$numbers = [1, 2, 3, 4, 5];
echo "Second element of the array: " . $numbers[1] . "<br>";

// GET dan POST
if ($_SERVER['REQUEST_METHOD'] === 'GET') {
    $param = $_GET['param'];
    echo "GET parameter: " . $param . "<br>";
} elseif ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $param = $_POST['param'];
    echo "POST parameter: " . $param . "<br>";
}

// Boolean
$isTrue = true;
$isFalse = false;

// Integer
$integer = 10;

// Float
$float = 3.14;

// String
$string = "Hello, World!";

// Object
$user = new UserName("Alice", "alice@example.com");
$user->displayInfo();

// Resource
$resource = fopen("filename.txt", "r");

// NULL
$nullValue = null;

// Operasi File
$fileContent = FileManager::readFile("filename.txt");
echo "File content: " . $fileContent . "<br>";

// Session
SessionManager::setSession("username", "john");
$username = SessionManager::getSession("username");
echo "Username from session: " . $username . "<br>";

// Fungsi Built-in
$reversedString = StringManipulator::reverseString("Hello");
echo "Reversed string: " . $reversedString . "<br>";

?>
<?php

class Calculator
{
    public function add($num1, $num2)
    {
        return $num1 + $num2;
    }

    public function subtract($num1, $num2)
    {
        return $num1 - $num2;
    }

    public function multiply($num1, $num2)
    {
        return $num1 * $num2;
    }

    public function divide($num1, $num2)
    {
        if ($num2 != 0) {
            return $num1 / $num2;
        } else {
            return "Cannot divide by zero";
        }
    }
}

// Penggunaan contoh
$calculator = new Calculator();

// Operasi penjumlahan
$result = $calculator->add(5, 3);
echo "5 + 3 = " . $result . "<br>";

// Operasi pengurangan
$result = $calculator->subtract(10, 4);
echo "10 - 4 = " . $result . "<br>";

// Operasi perkalian
$result = $calculator->multiply(6, 2);
echo "6 * 2 = " . $result . "<br>";

// Operasi pembagian
$result = $calculator->divide(8, 2);
echo "8 / 2 = " . $result . "<br>";

$result = $calculator->divide(10, 0);
echo "10 / 0 = " . $result . "<br>";


class MyClass
{
    // Fungsi tanpa parameter
    public function sayHello()
    {
        echo "Hello!<br>";
    }

    // Fungsi dengan parameter
    public function greet($name)
    {
        echo "Hello, " . $name . "!<br>";
    }

    // Fungsi dengan nilai kembalian
    public function add($num1, $num2)
    {
        return $num1 + $num2;
    }

    // Fungsi dengan pengembalian objek
    public function createPerson($name, $age)
    {
        return new Person($name, $age);
    }

    // Fungsi dengan argumen opsional
    public function getFullName($firstName, $lastName = "")
    {
        if ($lastName != "") {
            return $firstName . " " . $lastName;
        } else {
            return $firstName;
        }
    }
}

class Person
{
    public $name;
    public $age;

    public function __construct($name, $age)
    {
        $this->name = $name;
        $this->age = $age;
    }

    public function displayInfo()
    {
        echo "Name: " . $this->name . "<br>";
        echo "Age: " . $this->age . "<br>";
    }
}

// Penggunaan contoh
$myObj = new MyClass();

$myObj->sayHello(); // Memanggil fungsi tanpa parameter

$myObj->greet("John"); // Memanggil fungsi dengan parameter

$result = $myObj->add(5, 3); // Memanggil fungsi dengan nilai kembalian
echo "Result: " . $result . "<br>";

$person = $myObj->createPerson("Alice", 25); // Memanggil fungsi dengan pengembalian objek
$person->displayInfo();

$fullName1 = $myObj->getFullName("John"); // Memanggil fungsi dengan argumen opsional
echo "Full Name 1: " . $fullName1 . "<br>";

$fullName2 = $myObj->getFullName("Jane", "Doe");
echo "Full Name 2: " . $fullName2 . "<br>";

?>
<?php

class MathUtils
{
    public static function square($num)
    {
        return $num * $num;
    }

    public static function cube($num)
    {
        return $num * $num * $num;
    }

    public static function factorial($num)
    {
        if ($num == 0 || $num == 1) {
            return 1;
        } else {
            return $num * self::factorial($num - 1);
        }
    }
}

class StringManipulator2
{
    public static function reverse($str)
    {
        return strrev($str);
    }

    public static function countWords($str)
    {
        $words = explode(" ", $str);
        return count($words);
    }

    public static function capitalize($str)
    {
        return ucwords($str);
    }
}

class ArrayUtils
{
    public static function findMax($arr)
    {
        return max($arr);
    }

    public static function findMin($arr)
    {
        return min($arr);
    }

    public static function sum($arr)
    {
        return array_sum($arr);
    }

    public static function average($arr)
    {
        $count = count($arr);
        if ($count > 0) {
            return self::sum($arr) / $count;
        } else {
            return 0;
        }
    }
}

// Penggunaan contoh
echo "Square of 4: " . MathUtils::square(4) . "<br>";
echo "Cube of 3: " . MathUtils::cube(3) . "<br>";
echo "Factorial of 5: " . MathUtils::factorial(5) . "<br>";

echo "Reverse of 'Hello': " . StringManipulator2::reverse("Hello") . "<br>";
echo "Word count of 'This is a sentence': " . StringManipulator2::countWords("This is a sentence") . "<br>";
echo "Capitalized string of 'hello world': " . StringManipulator2::capitalize("hello world") . "<br>";

$numbers = [4, 9, 2, 7, 5];
echo "Maximum number: " . ArrayUtils::findMax($numbers) . "<br>";
echo "Minimum number: " . ArrayUtils::findMin($numbers) . "<br>";
echo "Sum of numbers: " . ArrayUtils::sum($numbers) . "<br>";
echo "Average of numbers: " . ArrayUtils::average($numbers) . "<br>";

?>
<?php

class User
{
    private $name;
    private $email;

    public function __construct($name, $email)
    {
        $this->name = $name;
        $this->email = $email;
    }

    public function getName()
    {
        return $this->name;
    }

    public function getEmail()
    {
        return $this->email;
    }

    public function setName($name)
    {
        $this->name = $name;
    }

    public function setEmail($email)
    {
        $this->email = $email;
    }
}

class FileManager2
{
    public static function readFile($filename)
    {
        if (file_exists($filename)) {
            return file_get_contents($filename);
        } else {
            return "File not found";
        }
    }

    public static function writeFile($filename, $content)
    {
        return file_put_contents($filename, $content);
    }

    public static function appendToFile($filename, $content)
    {
        return file_put_contents($filename, $content, FILE_APPEND);
    }
}

function calculateBMI($weight, $height)
{
    $heightInMeters = $height / 100;
    return $weight / ($heightInMeters * $heightInMeters);
}

function generateRandomNumber($min, $max)
{
    return rand($min, $max);
}

function isPalindrome($str)
{
    $reverse = strrev($str);
    if ($str == $reverse) {
        return true;
    } else {
        return false;
    }
}

// Penggunaan contoh
$user = new User("John Doe", "john@example.com");
echo "Name: " . $user->getName() . "<br>";
echo "Email: " . $user->getEmail() . "<br>";

FileManager::writeFile("example.txt", "Hello, World!");

echo FileManager::readFile("example.txt") . "<br>";

echo "BMI: " . calculateBMI(70, 175) . "<br>";

echo "Random Number: " . generateRandomNumber(1, 10) . "<br>";

if (isPalindrome("radar")) {
    echo "Palindrome";
} else {
    echo "Not a palindrome";
}
?>
<?php
class MyFunctions2
{

    // Fungsi untuk menghitung luas segitiga
    public function calculateTriangleArea($base, $height)
    {
        $area = 0.5 * $base * $height;
        return $area;
    }

    // Fungsi untuk menghitung luas trapesium
    public function calculateTrapezoidArea($base1, $base2, $height)
    {
        $area = 0.5 * ($base1 + $base2) * $height;
        return $area;
    }

    // Fungsi untuk menghitung volume balok
    public function calculateRectangularVolume($length, $width, $height)
    {
        $volume = $length * $width * $height;
        return $volume;
    }

    // Fungsi untuk menghitung volume tabung
    public function calculateCylinderVolume($radius, $height)
    {
        $volume = pi() * $radius * $radius * $height;
        return $volume;
    }

    // Fungsi untuk menghitung pangkat dua suatu bilangan
    public function calculateSquare($number)
    {
        $square = $number * $number;
        return $square;
    }

    // Fungsi untuk menghitung bilangan Fibonacci
    public function generateFibonacci($n)
    {
        $fibonacci = [];
        $fibonacci[0] = 0;
        $fibonacci[1] = 1;

        for ($i = 2; $i < $n; $i++) {
            $fibonacci[$i] = $fibonacci[$i - 1] + $fibonacci[$i - 2];
        }

        return $fibonacci;
    }
}

// Contoh penggunaan fungsi-fungsi dalam class
$myFunctions = new MyFunctions2();
echo "Luas segitiga dengan alas 6 dan tinggi 8 adalah " . $myFunctions->calculateTriangleArea(6, 8) . "<br>";
echo "Luas trapesium dengan panjang alas atas 4, panjang alas bawah 7, dan tinggi 5 adalah " . $myFunctions->calculateTrapezoidArea(4, 7, 5) . "<br>";
echo "Volume balok dengan panjang 3, lebar 4, dan tinggi 5 adalah " . $myFunctions->calculateRectangularVolume(3, 4, 5) . "<br>";
echo "Volume tabung dengan jari-jari 2 dan tinggi 6 adalah " . $myFunctions->calculateCylinderVolume(2, 6) . "<br>";
echo "Pangkat dua dari angka 9 adalah " . $myFunctions->calculateSquare(9) . "<br>";
echo "10 bilangan Fibonacci pertama adalah " . implode(", ", $myFunctions->generateFibonacci(10)) . "<br>";


class MyFunctions
{

    // Fungsi untuk menghitung luas persegi
    public function calculateSquareArea($side)
    {
        $area = $side * $side;
        return $area;
    }

    // Fungsi untuk menghitung luas lingkaran
    public function calculateCircleArea($radius)
    {
        $area = pi() * $radius * $radius;
        return $area;
    }

    // Fungsi untuk mengkonversi suhu dari Celsius ke Fahrenheit
    public function celsiusToFahrenheit($celsius)
    {
        $fahrenheit = ($celsius * 9 / 5) + 32;
        return $fahrenheit;
    }

    // Fungsi untuk mengkonversi suhu dari Fahrenheit ke Celsius
    public function fahrenheitToCelsius($fahrenheit)
    {
        $celsius = ($fahrenheit - 32) * 5 / 9;
        return $celsius;
    }

    // Fungsi untuk membalikkan urutan karakter dalam string
    public function reverseString($string)
    {
        $reverseString = strrev($string);
        return $reverseString;
    }

    // Fungsi untuk menghitung faktorial dari suatu angka
    public function calculateFactorial($number)
    {
        $factorial = 1;
        for ($i = $number; $i > 0; $i--) {
            $factorial *= $i;
        }
        return $factorial;
    }

    // Fungsi untuk menghitung nilai maksimum dalam sebuah array
    public function findMaxValue($array)
    {
        $maxValue = max($array);
        return $maxValue;
    }

    // Fungsi untuk menggabungkan dua array menjadi satu array
    public function mergeArrays($array1, $array2)
    {
        $mergedArray = array_merge($array1, $array2);
        return $mergedArray;
    }

    // Fungsi untuk menghitung jumlah kata dalam sebuah string
    public function countWords($string)
    {
        $wordCount = str_word_count($string);
        return $wordCount;
    }
}

// Contoh penggunaan fungsi-fungsi dalam class
$myFunctions = new MyFunctions();
echo "Luas persegi dengan sisi 5 adalah " . $myFunctions->calculateSquareArea(5) . "<br>";
echo "Luas lingkaran dengan jari-jari 3 adalah " . $myFunctions->calculateCircleArea(3) . "<br>";
echo "Konversi suhu 30 derajat Celsius ke Fahrenheit adalah " . $myFunctions->celsiusToFahrenheit(30) . "<br>";
echo "Konversi suhu 86 derajat Fahrenheit ke Celsius adalah " . $myFunctions->fahrenheitToCelsius(86) . "<br>";
echo "Urutan karakter dalam string 'Hello World!' setelah dibalik menjadi '" . $myFunctions->reverseString('Hello World!') . "'<br>";
echo "Faktorial dari angka 5 adalah " . $myFunctions->calculateFactorial(5) . "<br>";

$array = [2, 5, 1, 10, 8];
echo "Nilai maksimum dalam array [2, 5, 1, 10, 8] adalah " . $myFunctions->findMaxValue($array) . "<br>";

$array1 = [1, 2, 3];
$array2 = [4, 5, 6];
echo "Hasil penggabungan array [1, 2, 3] dan [4, 5, 6] adalah " . implode(", ", $myFunctions->mergeArrays($array1, $array2)) . "<br>";

$string = "Ini adalah contoh string";
echo "Jumlah kata dalam string 'Ini adalah contoh string' adalah " . $myFunctions->countWords($string) . "<br>";


if (isset($_GET['nama'])) {
    $nama = $_GET['nama'];
    echo "Halo, " . $nama . "! Ini adalah contoh GET function.";
}


if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if (isset($_POST['pesan'])) {
        $pesan = $_POST['pesan'];
        echo "Pesan: " . $pesan . " (Ini adalah contoh POST function)";
    }
}


for ($i = 1; $i <= 5; $i++) {
    echo "Angka: " . $i . "<br>";
}


$PI = 3.14;
echo "Nilai PI adalah: " . $PI;

// Rumus menghitung luas persegi
function luasPersegi($sisi)
{
    return $sisi * $sisi;
}

// Rumus menghitung luas persegi panjang
function luasPersegiPanjang($panjang, $lebar)
{
    return $panjang * $lebar;
}

// Rumus menghitung luas segitiga
function luasSegitiga($alas, $tinggi)
{
    return 0.5 * $alas * $tinggi;
}

// Rumus menghitung luas trapesium
function luasTrapesium($sisiA, $sisiB, $tinggi)
{
    return ($sisiA + $sisiB) * $tinggi / 2;
}

// Rumus menghitung luas lingkaran
function luasLingkaran($jariJari)
{
    return 3.14 * $jariJari * $jariJari;
}

// Rumus menghitung volume kubus
function volumeKubus($sisi)
{
    return $sisi * $sisi * $sisi;
}

// Rumus menghitung volume balok
function volumeBalok($panjang, $lebar, $tinggi)
{
    return $panjang * $lebar * $tinggi;
}

// Rumus menghitung volume tabung
function volumeTabung($jariJari, $tinggi)
{
    return 3.14 * $jariJari * $jariJari * $tinggi;
}

// Rumus menghitung volume bola
function volumeBola($jariJari)
{
    return 4 / 3 * 3.14 * $jariJari * $jariJari * $jariJari;
}

// Rumus menghitung bilangan faktorial
function faktorial($n)
{
    if ($n <= 1) {
        return 1;
    } else {
        return $n * faktorial($n - 1);
    }
}

// Rumus menghitung persentase
function persentase($nilai, $total)
{
    return ($nilai / $total) * 100;
}

// Rumus menghitung rata-rata
function rataRata($data)
{
    $jumlah = array_sum($data);
    $jumlahData = count($data);
    return $jumlah / $jumlahData;
}

// Rumus menghitung nilai maksimum
function nilaiMaksimum($data)
{
    return max($data);
}

// Rumus menghitung nilai minimum
function nilaiMinimum($data)
{
    return min($data);
}

// Rumus menghitung median
function median($data)
{
    sort($data);
    $jumlahData = count($data);
    $tengah = floor($jumlahData / 2);
    if ($jumlahData % 2) {
        return $data[$tengah];
    } else {
        return ($data[$tengah - 1] + $data[$tengah]) / 2;
    }
}

// Rumus menghitung modus
function modus($data)
{
    $counts = array_count_values($data);
    $maxCount = max($counts);
    $modus = array_keys($counts, $maxCount);
    return $modus;
}

// Rumus menghitung pangkat
function pangkat($angka, $pangkat)
{
    return pow($angka, $pangkat);
}

// Rumus menghitung akar kuadrat
function akarKuadrat($angka)
{
    return sqrt($angka);
}

// Rumus menghitung logaritma
function logaritma($angka, $basis)
{
    return log($angka, $basis);
}

// Rumus menghitung sin
function sinus($sudut)
{
    return sin(deg2rad($sudut));
}

// Rumus menghitung cos
function cosinus($sudut)
{
    return cos(deg2rad($sudut));
}

// Rumus menghitung tan
function tangen($sudut)
{
    return tan(deg2rad($sudut));
}

// Contoh penggunaan rumus-rumus di atas
echo "Luas persegi dengan sisi 5: " . luasPersegi(5) . "<br>";
echo "Luas persegi panjang dengan panjang 4 dan lebar 6: " . luasPersegiPanjang(4, 6) . "<br>";
echo "Luas segitiga dengan alas 8 dan tinggi 6: " . luasSegitiga(8, 6) . "<br>";
echo "Luas trapesium dengan sisi A 4, sisi B 6, dan tinggi 5: " . luasTrapesium(4, 6, 5) . "<br>";
echo "Luas lingkaran dengan jari-jari 7: " . luasLingkaran(7) . "<br>";
echo "Volume kubus dengan sisi 3: " . volumeKubus(3) . "<br>";
echo "Volume balok dengan panjang 4, lebar 5, dan tinggi 6: " . volumeBalok(4, 5, 6) . "<br>";
echo "Volume tabung dengan jari-jari 3 dan tinggi 8: " . volumeTabung(3, 8) . "<br>";
echo "Volume bola dengan jari-jari 5: " . volumeBola(5) . "<br>";
echo "Faktorial dari 5: " . faktorial(5) . "<br>";

$data = [3, 5, 2, 8, 4, 6, 7];
echo "Persentase nilai 6 dari total 10: " . persentase(6, 10) . "%<br>";
echo "Rata-rata dari data " . implode(", ", $data) . ": " . rataRata($data) . "<br>";
echo "Nilai maksimum dari data " . implode(", ", $data) . ": " . nilaiMaksimum($data) . "<br>";
echo "Nilai minimum dari data " . implode(", ", $data) . ": " . nilaiMinimum($data) . "<br>";
echo "Median dari data " . implode(", ", $data) . ": " . median($data) . "<br>";
echo "Modus dari data " . implode(", ", $data) . ": " . implode(", ", modus($data)) . "<br>";

echo "5 pangkat 3: " . pangkat(5, 3) . "<br>";
echo "Akar kuadrat dari 25: " . akarKuadrat(25) . "<br>";
echo "Logaritma dari 100 dengan basis 10: " . logaritma(100, 10) . "<br>";
echo "Sinus dari sudut 45 derajat: " . sinus(45) . "<br>";
echo "Cosinus dari sudut 60 derajat: " . cosinus(60) . "<br>";
echo "Tangen dari sudut 30 derajat: " . tangen(30) . "<br>";

$namaFile = "data.txt";
$file = fopen($namaFile, "r");

if ($file) {
    while (($line = fgets($file)) !== false) {
        echo $line . "<br>";
    }

    fclose($file);
} else {
    echo "Gagal membuka file.";
}

$string = "Ini adalah contoh kalimat.";
$jumlahKata = str_word_count($string);

echo "Jumlah kata: " . $jumlahKata;

$angka = [1, 2, 3, 4, 5];
shuffle($angka);

echo "Urutan acak: " . implode(", ", $angka);

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $nama = $_POST["nama"];
    $email = $_POST["email"];

    echo "Halo, $nama! Email kamu adalah $email.";
}

$tanggal = date("d F Y");
$waktu = date("H:i:s");

echo "Tanggal: $tanggal<br>";
echo "Waktu: $waktu";

function faktorial1($n)
{
    if ($n <= 1) {
        return 1;
    } else {
        return $n * faktorial1($n - 1);
    }
}

$angka = 5;
$hasilFaktorial = faktorial($angka);

echo "Faktorial dari $angka: $hasilFaktorial";

function divide($a, $b)
{
    if ($b == 0) {
        throw new Exception("Tidak bisa membagi dengan nol!");
    }

    return $a / $b;
}

try {
    $hasil = divide(10, 0);
    echo "Hasil pembagian: $hasil";
} catch (Exception $e) {
    echo "Terjadi kesalahan: " . $e->getMessage();
}


$servername = "localhost";
$username = "root";
$password = "password";
$dbname = "mydb";

// Membuat koneksi
$conn = new mysqli($servername, $username, $password, $dbname);

// Memeriksa koneksi
if ($conn->connect_error) {
    die("Koneksi gagal: " . $conn->connect_error);
}

// Menjalankan query
$sql = "SELECT id, nama, email FROM users";
$result = $conn->query($sql);

if ($result->num_rows > 0) {
    // Menampilkan hasil query
    while ($row = $result->fetch_assoc()) {
        echo "ID: " . $row["id"] . " - Nama: " . $row["nama"] . " - Email: " . $row["email"] . "<br>";
    }
} else {
    echo "Tidak ada data.";
}

// Menutup koneksi
$conn->close();


session_start();

// Menyimpan data ke session
$_SESSION["username"] = "john.doe";
$_SESSION["email"] = "john.doe@example.com";

// Mengakses data dari session
$username = $_SESSION["username"];
$email = $_SESSION["email"];

// Menampilkan data session
echo "Username: " . $username . "<br>";
echo "Email: " . $email;


$ch = curl_init();

// Konfigurasi URL dan opsi cURL
curl_setopt($ch, CURLOPT_URL, "https://api.example.com/data");
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

// Melakukan HTTP GET request
$response = curl_exec($ch);

// Menutup koneksi cURL
curl_close($ch);

// Menampilkan response
echo $response;

$string = "Lorem ipsum dolor sit amet, consectetur adipiscing elit.";

// Mencocokkan kata "ipsum" dalam string
if (preg_match("/ipsum/", $string)) {
    echo "Kata 'ipsum' ditemukan!";
} else {
    echo "Kata 'ipsum' tidak ditemukan.";
}

// Mengganti kata "dolor" dengan "sunt" dalam string
$hasil = preg_replace("/dolor/", "sunt", $string);
echo "Hasil: " . $hasil;


// Membuat array data
$data = [
    "nama" => "John Doe",
    "umur" => 30,
    "pekerjaan" => "Developer"
];

// Mengubah array menjadi JSON
$jsonData = json_encode($data);

// Menampilkan data JSON
echo $jsonData;

// Mendapatkan data JSON dan mengubahnya menjadi array
$receivedData = '{"nama":"Jane Smith","umur":25,"pekerjaan":"Designer"}';
$dataArray = json_decode($receivedData, true);

// Mengakses data dalam array
echo "Nama: " . $dataArray["nama"];
echo "Umur: " . $dataArray["umur"];
echo "Pekerjaan: " . $dataArray["pekerjaan"];

$fruits = array("Apel", "Jeruk", "Mangga");

// Menampilkan semua elemen dalam array
foreach ($fruits as $fruit) {
    echo $fruit . "<br>";
}

// Menampilkan indeks dan nilai elemen dalam array
foreach ($fruits as $index => $fruit) {
    echo "Indeks: " . $index . ", Nilai: " . $fruit . "<br>";
}

$dateString = "2023-05-24";

// Mengkonversi string menjadi tanggal
$date = date("d F Y", strtotime($dateString));

echo "Tanggal: " . $date;


$email = "john.doe@example.com";

// Memvalidasi format email
if (filter_var($email, FILTER_VALIDATE_EMAIL)) {
    echo "Email valid.";
} else {
    echo "Email tidak valid.";
}

$age = "25";

// Memvalidasi angka dalam rentang tertentu
if (filter_var($age, FILTER_VALIDATE_INT, array("options" => array("min_range" => 1, "max_range" => 100)))) {
    echo "Umur valid.";
} else {
    echo "Umur tidak valid.";
}


$numbers = array(1, 2, 3, 4, 5);

// Menggandakan setiap elemen dalam array
$doubledNumbers = array_map(function ($n) {
    return $n * 2;
}, $numbers);

// Menampilkan hasil
print_r($doubledNumbers);


$numbers = array(1, 2, 3, 4, 5);

// Mengecek apakah bilangan adalah ganjil
$oddNumbers = array_filter($numbers, function ($n) {
    return $n % 2 != 0;
});

// Menampilkan hasil
print_r($oddNumbers);


session_start();

// Memeriksa apakah pengguna telah login
if (!isset($_SESSION["logged_in"]) || $_SESSION["logged_in"] !== true) {
    // Redirect ke halaman login jika belum login
    header("Location: login.php");
    exit;
}

// Halaman yang hanya dapat diakses jika pengguna telah login
echo "Selamat datang, " . $_SESSION["username"];

// Membaca data dari file CSV
$csvFile = fopen('data.csv', 'r');

while (($data = fgetcsv($csvFile)) !== false) {
    // Menampilkan data
    echo implode(', ', $data) . "<br>";
}

fclose($csvFile);

// Menulis data ke file CSV
$data = array(
    array('John Doe', 'john.doe@example.com'),
    array('Jane Smith', 'jane.smith@example.com'),
    array('Bob Johnson', 'bob.johnson@example.com')
);

$csvFile = fopen('data.csv', 'w');

foreach ($data as $row) {
    fputcsv($csvFile, $row);
}

fclose($csvFile);


$sourceImage = 'image.jpg';
$thumbnailWidth = 200;
$thumbnailHeight = 200;

// Mendapatkan informasi gambar asli
list($width, $height) = getimagesize($sourceImage);

// Membuat gambar kosong untuk thumbnail
$thumbnail = imagecreatetruecolor($thumbnailWidth, $thumbnailHeight);

// Memuat gambar asli
$source = imagecreatefromjpeg($sourceImage);

// Menyalin dan menyesuaikan ukuran gambar asli ke thumbnail
imagecopyresampled($thumbnail, $source, 0, 0, 0, 0, $thumbnailWidth, $thumbnailHeight, $width, $height);

// Menyimpan thumbnail sebagai file
imagejpeg($thumbnail, 'thumbnail.jpg');

// Membebaskan memori
imagedestroy($source);
imagedestroy($thumbnail);

echo "Thumbnail telah dibuat.";


if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $targetDirectory = "uploads/";
    $targetFile = $targetDirectory . basename($_FILES["fileToUpload"]["name"]);
    $uploadOk = 1;
    $imageFileType = strtolower(pathinfo($targetFile, PATHINFO_EXTENSION));

    // Memeriksa apakah file adalah gambar
    if (isset($_POST["submit"])) {
        $check = getimagesize($_FILES["fileToUpload"]["tmp_name"]);
        if ($check !== false) {
            echo "File adalah gambar - " . $check["mime"] . ".";
            $uploadOk = 1;
        } else {
            echo "File bukan gambar.";
            $uploadOk = 0;
        }
    }

    // Memeriksa apakah file sudah ada
    if (file_exists($targetFile)) {
        echo "Maaf, file sudah ada.";
        $uploadOk = 0;
    }

    // Memeriksa ukuran file
    if ($_FILES["fileToUpload"]["size"] > 500000) {
        echo "Maaf, file terlalu besar.";
        $uploadOk = 0;
    }

    // Memeriksa tipe file yang diizinkan
    if (
        $imageFileType != "jpg" && $imageFileType != "png" && $imageFileType != "jpeg"
        && $imageFileType != "gif"
    ) {
        echo "Maaf, hanya file JPG, JPEG, PNG, dan GIF yang diperbolehkan.";
        $uploadOk = 0;
    }

    // Memeriksa apakah upload berhasil
    if ($uploadOk == 0) {
        echo "Maaf, file gagal diunggah.";
    } else {
        if (move_uploaded_file($_FILES["fileToUpload"]["tmp_name"], $targetFile)) {
            echo "File " . basename($_FILES["fileToUpload"]["name"]) . " berhasil diunggah.";
        } else {
            echo "Maaf, terjadi kesalahan saat mengunggah file.";
        }
    }
}


function factorial($n)
{
    if ($n <= 1) {
        return 1;
    } else {
        return $n * factorial($n - 1);
    }
}

$number = 5;
$factorial = factorial($number);

echo "Faktorial dari $number adalah $factorial.";


// Membuat hash password
$password = "password123";
$hashedPassword = password_hash($password, PASSWORD_DEFAULT);

echo "Hashed Password: " . $hashedPassword . "<br>";

// Memverifikasi password
$enteredPassword = "password123";
if (password_verify($enteredPassword, $hashedPassword)) {
    echo "Password valid.";
} else {
    echo "Password tidak valid.";
}

$fileContents = file_get_contents("file.txt");

echo $fileContents;

$data = "Hello, World!";
file_put_contents("file.txt", $data);

// Menampilkan tanggal hari ini
$dateToday = date("Y-m-d");
echo "Hari ini: " . $dateToday . "<br>";

// Menambahkan 7 hari ke tanggal hari ini
$dateFuture = date("Y-m-d", strtotime("+7 days"));
echo "Tanggal 7 hari ke depan: " . $dateFuture . "<br>";

// Mengurangi 1 bulan dari tanggal hari ini
$datePast = date("Y-m-d", strtotime("-1 month"));
echo "Tanggal 1 bulan yang lalu: " . $datePast . "<br>";

// Menampilkan waktu saat ini
$timeNow = date("H:i:s");
echo "Waktu sekarang: " . $timeNow;


session_start();

// Menyimpan data ke session
$_SESSION["username"] = "john.doe";
$_SESSION["email"] = "john.doe@example.com";

// Mengakses data dari session
$username = $_SESSION["username"];
$email = $_SESSION["email"];

// Menampilkan data session
echo "Username: " . $username . "<br>";
echo "Email: " . $email;


// Redirect ke halaman lain setelah 5 detik
header("Refresh: 5; url=halaman-lain.php");

echo "Anda akan dialihkan ke halaman lain dalam 5 detik...";


$url = "https://api.example.com/data.json";

// Membaca data JSON dari URL
$jsonData = file_get_contents($url);

// Mendekode JSON menjadi array
$data = json_decode($jsonData, true);

// Menampilkan data
foreach ($data as $item) {
    echo "Nama: " . $item["name"] . "<br>";
    echo "Usia: " . $item["age"] . "<br>";
    echo "Alamat: " . $item["address"] . "<br><br>";
}


// Inisialisasi cURL
$curl = curl_init();

// Set URL target
$url = "https://api.example.com/data";

// Set opsi cURL
curl_setopt($curl, CURLOPT_URL, $url);
curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);

// Kirim permintaan GET dan ambil responsenya
$response = curl_exec($curl);

// Cek kode status HTTP
$httpCode = curl_getinfo($curl, CURLINFO_HTTP_CODE);

// Tutup koneksi cURL
curl_close($curl);

// Menampilkan responsenya
if ($httpCode == 200) {
    echo "Response: " . $response;
} else {
    echo "Terjadi kesalahan. Kode status HTTP: " . $httpCode;
}


// Informasi koneksi ke database
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "database";

// Membuat koneksi
$conn = new mysqli($servername, $username, $password, $dbname);

// Memeriksa koneksi
if ($conn->connect_error) {
    die("Koneksi gagal: " . $conn->connect_error);
}

// Menjalankan query
$sql = "SELECT * FROM users";
$result = $conn->query($sql);

// Memeriksa hasil query
if ($result->num_rows > 0) {
    // Menampilkan data
    while ($row = $result->fetch_assoc()) {
        echo "ID: " . $row["id"] . "<br>";
        echo "Nama: " . $row["name"] . "<br>";
        echo "Email: " . $row["email"] . "<br><br>";
    }
} else {
    echo "Tidak ada data.";
}

// Menutup koneksi
$conn->close();


// Informasi koneksi ke database
$dsn = "mysql:host=localhost;dbname=database";
$username = "username";
$password = "password";

try {
    // Membuat koneksi menggunakan PDO
    $conn = new PDO($dsn, $username, $password);

    // Menjalankan query
    $sql = "SELECT * FROM users";
    $stmt = $conn->query($sql);

    // Memeriksa hasil query
    if ($stmt->rowCount() > 0) {
        // Menampilkan data
        while ($row = $stmt->fetch()) {
            echo "ID: " . $row["id"] . "<br>";
            echo "Nama: " . $row["name"] . "<br>";
            echo "Email: " . $row["email"] . "<br><br>";
        }
    } else {
        echo "Tidak ada data.";
    }
} catch (PDOException $e) {
    echo "Koneksi gagal: " . $e->getMessage();
}


session_start();

// Memeriksa apakah pengguna sudah login
if (!isset($_SESSION["loggedin"]) || $_SESSION["loggedin"] !== true) {
    header("Location: login.php");
    exit;
}

// Menampilkan halaman setelah login
echo "Selamat datang, " . $_SESSION["username"] . "!";


$email = "john.doe@example.com";

if (preg_match("/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/", $email)) {
    echo "Format email valid.";
} else {
    echo "Format email tidak valid.";
}


$email = "john.doe@example.com";

if (filter_var($email, FILTER_VALIDATE_EMAIL)) {
    echo "Format email valid.";
} else {
    echo "Format email tidak valid.";
}


$numbers = array(1, 2, 3, 4, 5);

// Mengkuadratkan setiap elemen dalam array
$squaredNumbers = array_map(function ($number) {
    return $number * $number;
}, $numbers);

// Menampilkan hasil
print_r($squaredNumbers);


$numbers = array(1, 2, 3, 4, 5);

// Memfilter elemen dalam array yang lebih besar dari 3
$filteredNumbers = array_filter($numbers, function ($number) {
    return $number > 3;
});

// Menampilkan hasil
print_r($filteredNumbers);


$numbers = array(1, 2, 3, 4, 5);

// Mereduksi elemen dalam array menjadi jumlah total
$total = array_reduce($numbers, function ($carry, $number) {
    return $carry + $number;
}, 0);

// Menampilkan hasil
echo "Total: " . $total;


$filename = "file.txt";

if (file_exists($filename)) {
    echo "File $filename ada.";
} else {
    echo "File $filename tidak ada.";
}


$dir = "folder";

if (is_dir($dir)) {
    echo "$dir adalah direktori.";
} else {
    echo "$dir bukan direktori.";
}


$dir = "folder";

// Mendapatkan daftar file dalam direktori
$files = scandir($dir);

// Menampilkan daftar file
foreach ($files as $file) {
    if ($file != "." && $file != "..") {
        echo "File: " . $file . "<br>";
    }
}

$file = "file.txt";

if (unlink($file)) {
    echo "File $file berhasil dihapus.";
} else {
    echo "Gagal menghapus file $file.";
}

$dir = "folder";

if (rmdir($dir)) {
    echo "Direktori $dir berhasil dihapus.";
} else {
    echo "Gagal menghapus direktori $dir.";
}

$file = "file.pdf";

// Set tipe konten sebagai PDF
header("Content-Type: application/pdf");

// Set header untuk melakukan download file
header("Content-Disposition: attachment; filename=\"" . basename($file) . "\"");

// Membaca file dan mengirimkannya ke output
readfile($file);

session_start();

// Menghapus semua data session
session_unset();

// Menghapus session cookie
if (ini_get("session.use_cookies")) {
    $params = session_get_cookie_params();
    setcookie(session_name(), '', time() - 42000, $params["path"], $params["domain"], $params["secure"], $params["httponly"]);
}

$file = "file.txt";
$data = "Hello, World!";

$handle = fopen($file, "w");
fwrite($handle, $data);
fclose($handle);

echo "Tulisan berhasil ditulis ke file $file.";

$numbers = array(1, 2, 2, 3, 4, 4, 5);

// Menghapus elemen duplikat dalam array
$uniqueNumbers = array_unique($numbers);

// Menampilkan hasil
print_r($uniqueNumbers);


$array1 = array("red", "green");
$array2 = array("blue", "yellow");

// Menggabungkan dua array menjadi satu
$mergedArray = array_merge($array1, $array2);

// Menampilkan hasil
print_r($mergedArray);


$student = array(
    "name" => "John Doe",
    "age" => 20,
    "email" => "john.doe@example.com"
);

// Mendapatkan semua kunci dalam array
$keys = array_keys($student);

// Menampilkan hasil
print_r($keys);


$student = array(
    "name" => "John Doe",
    "age" => 20,
    "email" => "john.doe@example.com"
);

// Mendapatkan semua nilai dalam array
$values = array_values($student);

// Menampilkan hasil
print_r($values);


$student = array(
    "name" => "John Doe",
    "age" => 20,
    "email" => "john.doe@example.com"
);

// Membalikkan kunci dan nilai dalam array
$flippedArray = array_flip($student);

// Menampilkan hasil
print_r($flippedArray);


$numbers = array(1, 2, 3, 4, 5);

// Mencari nilai 3 dalam array
$key = array_search(3, $numbers);

// Menampilkan hasil
echo "Kunci: " . $key;


$numbers = array(1, 2, 3, 4, 5);

// Membalik urutan elemen dalam array
$reversedArray = array_reverse($numbers);

// Menampilkan hasil
print_r($reversedArray);


$numbers = array(1, 2, 3, 4, 5);

// Mengambil 3 elemen pertama dalam array
$slicedArray = array_slice($numbers, 0, 3);

// Menampilkan hasil
print_r($slicedArray);


$fruits = array("apple", "banana", "orange");

// Menambahkan elemen baru ke akhir array
array_push($fruits, "mango");

// Menampilkan hasil
print_r($fruits);


$fruits = array("apple", "banana", "orange");

// Menghapus dan mengembalikan elemen terakhir dari array
$lastFruit = array_pop($fruits);

// Menampilkan hasil
echo "Buah terakhir: " . $lastFruit;

$fruits = array("apple", "banana", "orange");

// Menghapus dan mengembalikan elemen pertama dari array
$firstFruit = array_shift($fruits);

// Menampilkan hasil
echo "Buah pertama: " . $firstFruit;


$fruits = array("banana", "orange");

// Menambahkan elemen baru ke awal array
array_unshift($fruits, "apple");

// Menampilkan hasil
print_r($fruits);


$fruits = array("apple", "banana", "orange", "mango");

// Memilih elemen acak dari array
$randomFruit = $fruits[array_rand($fruits)];

// Menampilkan hasil
echo "Buah acak: " . $randomFruit;


$numbers = array(5, 2, 4, 1, 3);

// Mengurutkan array secara ascending
sort($numbers);

// Menampilkan hasil
print_r($numbers);


$numbers = array(5, 2, 4, 1, 3);

// Mengurutkan array secara descending
rsort($numbers);

// Menampilkan hasil
print_r($numbers);


$studentScores = array(
    "John" => 80,
    "Jane" => 90,
    "Mike" => 75
);

// Mengurutkan array asosiatif berdasarkan nilai secara ascending
asort($studentScores);

// Menampilkan hasil
print_r($studentScores);


$studentScores = array(
    "John" => 80,
    "Jane" => 90,
    "Mike" => 75
);

// Mengurutkan array asosiatif berdasarkan nilai secara descending
arsort($studentScores);

// Menampilkan hasil
print_r($studentScores);


$studentScores = array(
    "John" => 80,
    "Jane" => 90,
    "Mike" => 75
);

// Mengurutkan array asosiatif berdasarkan kunci secara ascending
ksort($studentScores);

// Menampilkan hasil
print_r($studentScores);


$studentScores = array(
    "John" => 80,
    "Jane" => 90,
    "Mike" => 75
);

// Mengurutkan array asosiatif berdasarkan kunci secara descending
krsort($studentScores);

// Menampilkan hasil
print_r($studentScores);


$numbers = array(1, 2, 2, 3, 4, 4, 5);

// Menghapus elemen duplikat numerik dalam array
$uniqueNumbers = array_unique($numbers, SORT_NUMERIC);

// Menampilkan hasil
print_r($uniqueNumbers);


$numbers = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

// Membagi array menjadi potongan-potongan lebih kecil
$chunks = array_chunk($numbers, 3);

// Menampilkan hasil
print_r($chunks);


$length = 5;
$value = "Hello";

// Membuat array dengan nilai yang sama
$filledArray = array_fill(0, $length, $value);

// Menampilkan hasil
print_r($filledArray);


$student = array(
    "name" => "John Doe",
    "age" => 20,
    "email" => "john.doe@example.com"
);

// Memeriksa apakah kunci "age" ada dalam array
if (array_key_exists("age", $student)) {
    echo "Kunci \"age\" ada dalam array.";
} else {
    echo "Kunci \"age\" tidak ada dalam array.";
}


$student = array(
    "name" => "John Doe",
    "age" => 20,
    "email" => "john.doe@example.com"
);

// Membalik urutan elemen dalam array sambil mempertahankan kunci
$reversedArray = array_reverse($student, true);

// Menampilkan hasil
print_r($reversedArray);


$array1 = array(1, 2, 3, 4, 5);
$array2 = array(3, 4, 5, 6, 7);
$array3 = array(5, 6, 7, 8, 9);

// Mengambil elemen-elemen yang ada di semua array
$intersectedArray = array_intersect($array1, $array2, $array3);

// Menampilkan hasil
print_r($intersectedArray);


$array1 = array(1, 2, 3, 4, 5);
$array2 = array(3, 4, 5, 6, 7);

// Mengambil elemen-elemen yang ada di array pertama tetapi tidak ada di array kedua
$differenceArray = array_diff($array1, $array2);

// Menampilkan hasil
print_r($differenceArray);


$fruits = array("apple", "banana");

// Menambahkan multiple elemen ke akhir array
array_push($fruits, "orange", "mango");

// Menampilkan hasil
print_r($fruits);


$array1 = array("name" => "John", "hobbies" => array("reading", "swimming"));
$array2 = array("age" => 25, "hobbies" => array("coding", "gaming"));

// Menggabungkan dua array secara rekursif
$mergedArray = array_merge_recursive($array1, $array2);

// Menampilkan hasil
print_r($mergedArray);


$string = "Hello, world!";

// Menggantikan substring dalam string
$newString = str_replace("world", "PHP", $string);

// Menampilkan hasil
echo $newString;


$string = "Hello, world!";

// Mendapatkan potongan substring dari string
$substring = substr($string, 7, 5);

// Menampilkan hasil
echo $substring;


$string = "Hello, world!";

// Mendapatkan panjang string
$length = strlen($string);

// Menampilkan hasil
echo "Panjang string: " . $length;


$string = "Hello, world!";

// Mencari posisi pertama kemunculan substring dalam string
$position = strpos($string, "world");

// Menampilkan hasil
echo "Posisi substring: " . $position;


$string = "Hello, World!";

// Mengubah string menjadi lowercase
$lowercaseString = strtolower($string);

// Menampilkan hasil
echo $lowercaseString;


$string = "   Hello, world!   ";

// Menghapus spasi ekstra di awal dan akhir string
$trimmedString = trim($string);

// Menampilkan hasil
echo $trimmedString;


$string = "apple,banana,orange";

// Memecah string menjadi array berdasarkan delimiter (koma)
$fruits = explode(",", $string);

// Menampilkan hasil
print_r($fruits);


$fruits = array("apple", "banana", "orange");

// Menggabungkan elemen-elemen array menjadi string dengan delimiter (koma)
$string = implode(",", $fruits);

// Menampilkan hasil
echo $string;


// Mendapatkan tanggal dan waktu saat ini
$currentDateTime = date("Y-m-d H:i:s");

// Menampilkan hasil
echo "Tanggal dan Waktu saat ini: " . $currentDateTime;


$dateString = "2023-05-24";

// Mengubah string tanggal menjadi timestamp
$timestamp = strtotime($dateString);

// Menampilkan hasil
echo "Timestamp: " . $timestamp;


$file = "example.txt";

// Membaca isi file menjadi string
$content = file_get_contents($file);

// Menampilkan hasil
echo $content;

$file = "example.txt";
$content = "Hello, world!";

// Menulis string ke dalam file
file_put_contents($file, $content);


$file = "example.txt";
$content = "Hello, world!";

// Membuka file dalam mode tulis
$handle = fopen($file, "w");

// Menulis string ke dalam file
fwrite($handle, $content);

// Menutup file
fclose($handle);


$file = "example.txt";

// Memeriksa apakah file ada atau tidak
if (file_exists($file)) {
    echo "File ada.";
} else {
    echo "File tidak ada.";
}


$directory = "path/to/directory";

// Memeriksa apakah suatu path adalah direktori
if (is_dir($directory)) {
    echo "Ini adalah direktori.";
} else {
    echo "Ini bukan direktori.";
}


$directory = "path/to/new/directory";

// Membuat direktori
mkdir($directory, 0755);


$directory = "path/to/directory";

// Menghapus direktori kosong
rmdir($directory);


$file = "example.txt";

// Menghapus file
unlink($file);


$files = glob("path/to/files/*.txt");

// Menampilkan daftar file yang cocok dengan pola
print_r($files);


// Mengatur header Content-Type sebagai JSON
header("Content-Type: application/json");

// Menampilkan data sebagai JSON
$data = array("name" => "John", "age" => 25);
echo json_encode($data);


// Inisialisasi curl
$curl = curl_init();

// Mengatur URL target
curl_setopt($curl, CURLOPT_URL, "https://api.example.com/data");

// Melakukan HTTP GET request
curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
$response = curl_exec($curl);

// Menutup curl
curl_close($curl);

// Menampilkan respons
echo $response;

$email = "john.doe@example.com";

// Memvalidasi email menggunakan filter_var
if (filter_var($email, FILTER_VALIDATE_EMAIL)) {
    echo "Email valid.";
} else {
    echo "Email tidak valid.";
}

$userInput = "<script>alert('XSS attack!');</script>";

// Menampilkan data pengguna dengan htmlspecialchars
echo htmlspecialchars($userInput);

$password = "secret123";

// Mengenkripsi password menggunakan password_hash
$hashedPassword = password_hash($password, PASSWORD_DEFAULT);

// Menampilkan hasil
echo $hashedPassword;

$password = "secret123";
$hashedPassword = "$2y$10$FQgDnyC3nNl4TgWLRli5Zuh0VqWWuonPY2UG/QM6K1ZTO8V6T2p6O";

// Memeriksa apakah password cocok dengan hash yang tersimpan menggunakan password_verify
if (password_verify($password, $hashedPassword)) {
    echo "Password cocok.";
} else {
    echo "Password tidak cocok.";
}

// Memulai sesi
session_start();

// Menyimpan data dalam sesi
$_SESSION["username"] = "john.doe";

// Mengakses data dalam sesi
echo "Username: " . $_SESSION["username"];

// Menghapus data dalam sesi
unset($_SESSION["username"]);

// Mengakhiri sesi
session_destroy();

try {
    // Potensi kode yang dapat menghasilkan pengecualian
    throw new Exception("Pesan pengecualian");
} catch (Exception $e) {
    // Menangani pengecualian
    echo "Pengecualian terjadi: " . $e->getMessage();
}

// Mengatur error reporting ke level E_ALL
ini_set("error_reporting", E_ALL);

// Mengatur zona waktu ke Asia/Jakarta
ini_set("date.timezone", "Asia/Jakarta");

$numbers = [1, 2, 3, 4, 5];

// Menerapkan fungsi kuadrat ke setiap elemen array
$squaredNumbers = array_map(function($number) {
    return $number * $number;
}, $numbers);

// Menampilkan hasil
print_r($squaredNumbers);

$numbers = [1, 2, 3, 4, 5];

// Menyaring elemen array yang merupakan bilangan ganjil
$oddNumbers = array_filter($numbers, function($number) {
    return $number % 2 != 0;
});

// Menampilkan hasil
print_r($oddNumbers);

$numbers = [1, 2, 3, 4, 5];

// Mengurangi elemen array dengan operasi penjumlahan
$sum = array_reduce($numbers, function($carry, $number) {
    return $carry + $number;
});

// Menampilkan hasil
echo $sum;

$fruits = ['apple', 'banana', 'orange'];

// Mendapatkan semua kunci (indeks) dari array
$keys = array_keys($fruits);

// Menampilkan hasil
print_r($keys);

$fruits = ['apple', 'banana', 'orange'];

// Mendapatkan semua nilai dari array
$values = array_values($fruits);

// Menampilkan hasil
print_r($values);

$fruits = ['apple', 'banana', 'orange'];

// Mendapatkan semua nilai dari array
$values = array_values($fruits);

// Menampilkan hasil
print_r($values);

$fruits = ['apple' => 'red', 'banana' => 'yellow', 'orange' => 'orange'];

// Menukar kunci dan nilai dalam array
$flippedArray = array_flip($fruits);

// Menampilkan hasil
print_r($flippedArray);

$numbers1 = [1, 2, 3];
$numbers2 = [4, 5, 6];
$numbers3 = [7, 8, 9];

// Menggabungkan beberapa array menjadi satu array
$mergedArray = array_merge($numbers1, $numbers2, $numbers3);

// Menampilkan hasil
print_r($mergedArray);

$numbers = [1, 2, 3, 4, 5];

// Membalik urutan elemen dalam array
$reversedArray = array_reverse($numbers);

// Menampilkan hasil
print_r($reversedArray);
